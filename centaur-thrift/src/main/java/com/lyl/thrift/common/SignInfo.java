/**
 * Autogenerated by Thrift Compiler (0.9.3)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
package com.lyl.thrift.common;

import org.apache.thrift.scheme.IScheme;
import org.apache.thrift.scheme.SchemeFactory;
import org.apache.thrift.scheme.StandardScheme;

import org.apache.thrift.scheme.TupleScheme;
import org.apache.thrift.protocol.TTupleProtocol;
import org.apache.thrift.protocol.TProtocolException;
import org.apache.thrift.EncodingUtils;
import org.apache.thrift.TException;
import org.apache.thrift.async.AsyncMethodCallback;
import org.apache.thrift.server.AbstractNonblockingServer.*;
import java.util.List;
import java.util.ArrayList;
import java.util.Map;
import java.util.HashMap;
import java.util.EnumMap;
import java.util.Set;
import java.util.HashSet;
import java.util.EnumSet;
import java.util.Collections;
import java.util.BitSet;
import java.nio.ByteBuffer;
import java.util.Arrays;
import javax.annotation.Generated;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;

@SuppressWarnings({"cast", "rawtypes", "serial", "unchecked"})
@Generated(value = "Autogenerated by Thrift Compiler (0.9.3)", date = "2018-12-25")
public class SignInfo implements org.apache.thrift.TBase<SignInfo, SignInfo._Fields>, java.io.Serializable, Cloneable, Comparable<SignInfo> {
  private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("SignInfo");

  private static final org.apache.thrift.protocol.TField SIGN_METHOD_FIELD_DESC = new org.apache.thrift.protocol.TField("signMethod", org.apache.thrift.protocol.TType.STRING, (short)1);
  private static final org.apache.thrift.protocol.TField SIGN_INFO_FIELD_DESC = new org.apache.thrift.protocol.TField("signInfo", org.apache.thrift.protocol.TType.STRING, (short)2);
  private static final org.apache.thrift.protocol.TField NOISE_FIELD_DESC = new org.apache.thrift.protocol.TField("noise", org.apache.thrift.protocol.TType.STRING, (short)3);

  private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
  static {
    schemes.put(StandardScheme.class, new SignInfoStandardSchemeFactory());
    schemes.put(TupleScheme.class, new SignInfoTupleSchemeFactory());
  }

  public String signMethod; // required
  public String signInfo; // required
  public String noise; // optional

  /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
  public enum _Fields implements org.apache.thrift.TFieldIdEnum {
    SIGN_METHOD((short)1, "signMethod"),
    SIGN_INFO((short)2, "signInfo"),
    NOISE((short)3, "noise");

    private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

    static {
      for (_Fields field : EnumSet.allOf(_Fields.class)) {
        byName.put(field.getFieldName(), field);
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, or null if its not found.
     */
    public static _Fields findByThriftId(int fieldId) {
      switch(fieldId) {
        case 1: // SIGN_METHOD
          return SIGN_METHOD;
        case 2: // SIGN_INFO
          return SIGN_INFO;
        case 3: // NOISE
          return NOISE;
        default:
          return null;
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, throwing an exception
     * if it is not found.
     */
    public static _Fields findByThriftIdOrThrow(int fieldId) {
      _Fields fields = findByThriftId(fieldId);
      if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
      return fields;
    }

    /**
     * Find the _Fields constant that matches name, or null if its not found.
     */
    public static _Fields findByName(String name) {
      return byName.get(name);
    }

    private final short _thriftId;
    private final String _fieldName;

    _Fields(short thriftId, String fieldName) {
      _thriftId = thriftId;
      _fieldName = fieldName;
    }

    public short getThriftFieldId() {
      return _thriftId;
    }

    public String getFieldName() {
      return _fieldName;
    }
  }

  // isset id assignments
  private static final _Fields optionals[] = {_Fields.NOISE};
  public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
  static {
    Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
    tmpMap.put(_Fields.SIGN_METHOD, new org.apache.thrift.meta_data.FieldMetaData("signMethod", org.apache.thrift.TFieldRequirementType.REQUIRED, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.SIGN_INFO, new org.apache.thrift.meta_data.FieldMetaData("signInfo", org.apache.thrift.TFieldRequirementType.REQUIRED, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.NOISE, new org.apache.thrift.meta_data.FieldMetaData("noise", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    metaDataMap = Collections.unmodifiableMap(tmpMap);
    org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(SignInfo.class, metaDataMap);
  }

  public SignInfo() {
  }

  public SignInfo(
    String signMethod,
    String signInfo)
  {
    this();
    this.signMethod = signMethod;
    this.signInfo = signInfo;
  }

  /**
   * Performs a deep copy on <i>other</i>.
   */
  public SignInfo(SignInfo other) {
    if (other.isSetSignMethod()) {
      this.signMethod = other.signMethod;
    }
    if (other.isSetSignInfo()) {
      this.signInfo = other.signInfo;
    }
    if (other.isSetNoise()) {
      this.noise = other.noise;
    }
  }

  public SignInfo deepCopy() {
    return new SignInfo(this);
  }

  @Override
  public void clear() {
    this.signMethod = null;
    this.signInfo = null;
    this.noise = null;
  }

  public String getSignMethod() {
    return this.signMethod;
  }

  public SignInfo setSignMethod(String signMethod) {
    this.signMethod = signMethod;
    return this;
  }

  public void unsetSignMethod() {
    this.signMethod = null;
  }

  /** Returns true if field signMethod is set (has been assigned a value) and false otherwise */
  public boolean isSetSignMethod() {
    return this.signMethod != null;
  }

  public void setSignMethodIsSet(boolean value) {
    if (!value) {
      this.signMethod = null;
    }
  }

  public String getSignInfo() {
    return this.signInfo;
  }

  public SignInfo setSignInfo(String signInfo) {
    this.signInfo = signInfo;
    return this;
  }

  public void unsetSignInfo() {
    this.signInfo = null;
  }

  /** Returns true if field signInfo is set (has been assigned a value) and false otherwise */
  public boolean isSetSignInfo() {
    return this.signInfo != null;
  }

  public void setSignInfoIsSet(boolean value) {
    if (!value) {
      this.signInfo = null;
    }
  }

  public String getNoise() {
    return this.noise;
  }

  public SignInfo setNoise(String noise) {
    this.noise = noise;
    return this;
  }

  public void unsetNoise() {
    this.noise = null;
  }

  /** Returns true if field noise is set (has been assigned a value) and false otherwise */
  public boolean isSetNoise() {
    return this.noise != null;
  }

  public void setNoiseIsSet(boolean value) {
    if (!value) {
      this.noise = null;
    }
  }

  public void setFieldValue(_Fields field, Object value) {
    switch (field) {
    case SIGN_METHOD:
      if (value == null) {
        unsetSignMethod();
      } else {
        setSignMethod((String)value);
      }
      break;

    case SIGN_INFO:
      if (value == null) {
        unsetSignInfo();
      } else {
        setSignInfo((String)value);
      }
      break;

    case NOISE:
      if (value == null) {
        unsetNoise();
      } else {
        setNoise((String)value);
      }
      break;

    }
  }

  public Object getFieldValue(_Fields field) {
    switch (field) {
    case SIGN_METHOD:
      return getSignMethod();

    case SIGN_INFO:
      return getSignInfo();

    case NOISE:
      return getNoise();

    }
    throw new IllegalStateException();
  }

  /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
  public boolean isSet(_Fields field) {
    if (field == null) {
      throw new IllegalArgumentException();
    }

    switch (field) {
    case SIGN_METHOD:
      return isSetSignMethod();
    case SIGN_INFO:
      return isSetSignInfo();
    case NOISE:
      return isSetNoise();
    }
    throw new IllegalStateException();
  }

  @Override
  public boolean equals(Object that) {
    if (that == null)
      return false;
    if (that instanceof SignInfo)
      return this.equals((SignInfo)that);
    return false;
  }

  public boolean equals(SignInfo that) {
    if (that == null)
      return false;

    boolean this_present_signMethod = true && this.isSetSignMethod();
    boolean that_present_signMethod = true && that.isSetSignMethod();
    if (this_present_signMethod || that_present_signMethod) {
      if (!(this_present_signMethod && that_present_signMethod))
        return false;
      if (!this.signMethod.equals(that.signMethod))
        return false;
    }

    boolean this_present_signInfo = true && this.isSetSignInfo();
    boolean that_present_signInfo = true && that.isSetSignInfo();
    if (this_present_signInfo || that_present_signInfo) {
      if (!(this_present_signInfo && that_present_signInfo))
        return false;
      if (!this.signInfo.equals(that.signInfo))
        return false;
    }

    boolean this_present_noise = true && this.isSetNoise();
    boolean that_present_noise = true && that.isSetNoise();
    if (this_present_noise || that_present_noise) {
      if (!(this_present_noise && that_present_noise))
        return false;
      if (!this.noise.equals(that.noise))
        return false;
    }

    return true;
  }

  @Override
  public int hashCode() {
    List<Object> list = new ArrayList<Object>();

    boolean present_signMethod = true && (isSetSignMethod());
    list.add(present_signMethod);
    if (present_signMethod)
      list.add(signMethod);

    boolean present_signInfo = true && (isSetSignInfo());
    list.add(present_signInfo);
    if (present_signInfo)
      list.add(signInfo);

    boolean present_noise = true && (isSetNoise());
    list.add(present_noise);
    if (present_noise)
      list.add(noise);

    return list.hashCode();
  }

  @Override
  public int compareTo(SignInfo other) {
    if (!getClass().equals(other.getClass())) {
      return getClass().getName().compareTo(other.getClass().getName());
    }

    int lastComparison = 0;

    lastComparison = Boolean.valueOf(isSetSignMethod()).compareTo(other.isSetSignMethod());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetSignMethod()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.signMethod, other.signMethod);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetSignInfo()).compareTo(other.isSetSignInfo());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetSignInfo()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.signInfo, other.signInfo);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetNoise()).compareTo(other.isSetNoise());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetNoise()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.noise, other.noise);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    return 0;
  }

  public _Fields fieldForId(int fieldId) {
    return _Fields.findByThriftId(fieldId);
  }

  public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
    schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
  }

  public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
    schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder("SignInfo(");
    boolean first = true;

    sb.append("signMethod:");
    if (this.signMethod == null) {
      sb.append("null");
    } else {
      sb.append(this.signMethod);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("signInfo:");
    if (this.signInfo == null) {
      sb.append("null");
    } else {
      sb.append(this.signInfo);
    }
    first = false;
    if (isSetNoise()) {
      if (!first) sb.append(", ");
      sb.append("noise:");
      if (this.noise == null) {
        sb.append("null");
      } else {
        sb.append(this.noise);
      }
      first = false;
    }
    sb.append(")");
    return sb.toString();
  }

  public void validate() throws org.apache.thrift.TException {
    // check for required fields
    if (signMethod == null) {
      throw new org.apache.thrift.protocol.TProtocolException("Required field 'signMethod' was not present! Struct: " + toString());
    }
    if (signInfo == null) {
      throw new org.apache.thrift.protocol.TProtocolException("Required field 'signInfo' was not present! Struct: " + toString());
    }
    // check for sub-struct validity
  }

  private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
    try {
      write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }

  private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
    try {
      read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }

  private static class SignInfoStandardSchemeFactory implements SchemeFactory {
    public SignInfoStandardScheme getScheme() {
      return new SignInfoStandardScheme();
    }
  }

  private static class SignInfoStandardScheme extends StandardScheme<SignInfo> {

    public void read(org.apache.thrift.protocol.TProtocol iprot, SignInfo struct) throws org.apache.thrift.TException {
      org.apache.thrift.protocol.TField schemeField;
      iprot.readStructBegin();
      while (true)
      {
        schemeField = iprot.readFieldBegin();
        if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
          break;
        }
        switch (schemeField.id) {
          case 1: // SIGN_METHOD
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.signMethod = iprot.readString();
              struct.setSignMethodIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 2: // SIGN_INFO
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.signInfo = iprot.readString();
              struct.setSignInfoIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 3: // NOISE
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.noise = iprot.readString();
              struct.setNoiseIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          default:
            org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
        }
        iprot.readFieldEnd();
      }
      iprot.readStructEnd();

      // check for required fields of primitive type, which can't be checked in the validate method
      struct.validate();
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot, SignInfo struct) throws org.apache.thrift.TException {
      struct.validate();

      oprot.writeStructBegin(STRUCT_DESC);
      if (struct.signMethod != null) {
        oprot.writeFieldBegin(SIGN_METHOD_FIELD_DESC);
        oprot.writeString(struct.signMethod);
        oprot.writeFieldEnd();
      }
      if (struct.signInfo != null) {
        oprot.writeFieldBegin(SIGN_INFO_FIELD_DESC);
        oprot.writeString(struct.signInfo);
        oprot.writeFieldEnd();
      }
      if (struct.noise != null) {
        if (struct.isSetNoise()) {
          oprot.writeFieldBegin(NOISE_FIELD_DESC);
          oprot.writeString(struct.noise);
          oprot.writeFieldEnd();
        }
      }
      oprot.writeFieldStop();
      oprot.writeStructEnd();
    }

  }

  private static class SignInfoTupleSchemeFactory implements SchemeFactory {
    public SignInfoTupleScheme getScheme() {
      return new SignInfoTupleScheme();
    }
  }

  private static class SignInfoTupleScheme extends TupleScheme<SignInfo> {

    @Override
    public void write(org.apache.thrift.protocol.TProtocol prot, SignInfo struct) throws org.apache.thrift.TException {
      TTupleProtocol oprot = (TTupleProtocol) prot;
      oprot.writeString(struct.signMethod);
      oprot.writeString(struct.signInfo);
      BitSet optionals = new BitSet();
      if (struct.isSetNoise()) {
        optionals.set(0);
      }
      oprot.writeBitSet(optionals, 1);
      if (struct.isSetNoise()) {
        oprot.writeString(struct.noise);
      }
    }

    @Override
    public void read(org.apache.thrift.protocol.TProtocol prot, SignInfo struct) throws org.apache.thrift.TException {
      TTupleProtocol iprot = (TTupleProtocol) prot;
      struct.signMethod = iprot.readString();
      struct.setSignMethodIsSet(true);
      struct.signInfo = iprot.readString();
      struct.setSignInfoIsSet(true);
      BitSet incoming = iprot.readBitSet(1);
      if (incoming.get(0)) {
        struct.noise = iprot.readString();
        struct.setNoiseIsSet(true);
      }
    }
  }

}


/**
 * Autogenerated by Thrift Compiler (0.9.3)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
package com.lyl.thrift.common;

import org.apache.thrift.scheme.IScheme;
import org.apache.thrift.scheme.SchemeFactory;
import org.apache.thrift.scheme.StandardScheme;

import org.apache.thrift.scheme.TupleScheme;
import org.apache.thrift.protocol.TTupleProtocol;
import org.apache.thrift.protocol.TProtocolException;
import org.apache.thrift.EncodingUtils;
import org.apache.thrift.TException;
import org.apache.thrift.async.AsyncMethodCallback;
import org.apache.thrift.server.AbstractNonblockingServer.*;
import java.util.List;
import java.util.ArrayList;
import java.util.Map;
import java.util.HashMap;
import java.util.EnumMap;
import java.util.Set;
import java.util.HashSet;
import java.util.EnumSet;
import java.util.Collections;
import java.util.BitSet;
import java.nio.ByteBuffer;
import java.util.Arrays;
import javax.annotation.Generated;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;

@SuppressWarnings({"cast", "rawtypes", "serial", "unchecked"})
@Generated(value = "Autogenerated by Thrift Compiler (0.9.3)", date = "2019-01-04")
public class ReturnMsg implements org.apache.thrift.TBase<ReturnMsg, ReturnMsg._Fields>, java.io.Serializable, Cloneable, Comparable<ReturnMsg> {
  private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("ReturnMsg");

  private static final org.apache.thrift.protocol.TField RETURN_CODE_FIELD_DESC = new org.apache.thrift.protocol.TField("returnCode", org.apache.thrift.protocol.TType.I64, (short)1);
  private static final org.apache.thrift.protocol.TField RETURN_INFO_FIELD_DESC = new org.apache.thrift.protocol.TField("returnInfo", org.apache.thrift.protocol.TType.STRING, (short)2);
  private static final org.apache.thrift.protocol.TField RETURN_RESPONSE_FIELD_DESC = new org.apache.thrift.protocol.TField("returnResponse", org.apache.thrift.protocol.TType.STRING, (short)3);
  private static final org.apache.thrift.protocol.TField RETURN_STACK_FIELD_DESC = new org.apache.thrift.protocol.TField("returnStack", org.apache.thrift.protocol.TType.STRING, (short)4);

  private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
  static {
    schemes.put(StandardScheme.class, new ReturnMsgStandardSchemeFactory());
    schemes.put(TupleScheme.class, new ReturnMsgTupleSchemeFactory());
  }

  public long returnCode; // required
  public String returnInfo; // required
  public String returnResponse; // required
  public String returnStack; // optional

  /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
  public enum _Fields implements org.apache.thrift.TFieldIdEnum {
    RETURN_CODE((short)1, "returnCode"),
    RETURN_INFO((short)2, "returnInfo"),
    RETURN_RESPONSE((short)3, "returnResponse"),
    RETURN_STACK((short)4, "returnStack");

    private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

    static {
      for (_Fields field : EnumSet.allOf(_Fields.class)) {
        byName.put(field.getFieldName(), field);
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, or null if its not found.
     */
    public static _Fields findByThriftId(int fieldId) {
      switch(fieldId) {
        case 1: // RETURN_CODE
          return RETURN_CODE;
        case 2: // RETURN_INFO
          return RETURN_INFO;
        case 3: // RETURN_RESPONSE
          return RETURN_RESPONSE;
        case 4: // RETURN_STACK
          return RETURN_STACK;
        default:
          return null;
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, throwing an exception
     * if it is not found.
     */
    public static _Fields findByThriftIdOrThrow(int fieldId) {
      _Fields fields = findByThriftId(fieldId);
      if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
      return fields;
    }

    /**
     * Find the _Fields constant that matches name, or null if its not found.
     */
    public static _Fields findByName(String name) {
      return byName.get(name);
    }

    private final short _thriftId;
    private final String _fieldName;

    _Fields(short thriftId, String fieldName) {
      _thriftId = thriftId;
      _fieldName = fieldName;
    }

    public short getThriftFieldId() {
      return _thriftId;
    }

    public String getFieldName() {
      return _fieldName;
    }
  }

  // isset id assignments
  private static final int __RETURNCODE_ISSET_ID = 0;
  private byte __isset_bitfield = 0;
  private static final _Fields optionals[] = {_Fields.RETURN_STACK};
  public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
  static {
    Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
    tmpMap.put(_Fields.RETURN_CODE, new org.apache.thrift.meta_data.FieldMetaData("returnCode", org.apache.thrift.TFieldRequirementType.REQUIRED, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I64)));
    tmpMap.put(_Fields.RETURN_INFO, new org.apache.thrift.meta_data.FieldMetaData("returnInfo", org.apache.thrift.TFieldRequirementType.REQUIRED, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.RETURN_RESPONSE, new org.apache.thrift.meta_data.FieldMetaData("returnResponse", org.apache.thrift.TFieldRequirementType.REQUIRED, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.RETURN_STACK, new org.apache.thrift.meta_data.FieldMetaData("returnStack", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    metaDataMap = Collections.unmodifiableMap(tmpMap);
    org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(ReturnMsg.class, metaDataMap);
  }

  public ReturnMsg() {
  }

  public ReturnMsg(
    long returnCode,
    String returnInfo,
    String returnResponse)
  {
    this();
    this.returnCode = returnCode;
    setReturnCodeIsSet(true);
    this.returnInfo = returnInfo;
    this.returnResponse = returnResponse;
  }

  /**
   * Performs a deep copy on <i>other</i>.
   */
  public ReturnMsg(ReturnMsg other) {
    __isset_bitfield = other.__isset_bitfield;
    this.returnCode = other.returnCode;
    if (other.isSetReturnInfo()) {
      this.returnInfo = other.returnInfo;
    }
    if (other.isSetReturnResponse()) {
      this.returnResponse = other.returnResponse;
    }
    if (other.isSetReturnStack()) {
      this.returnStack = other.returnStack;
    }
  }

  public ReturnMsg deepCopy() {
    return new ReturnMsg(this);
  }

  @Override
  public void clear() {
    setReturnCodeIsSet(false);
    this.returnCode = 0;
    this.returnInfo = null;
    this.returnResponse = null;
    this.returnStack = null;
  }

  public long getReturnCode() {
    return this.returnCode;
  }

  public ReturnMsg setReturnCode(long returnCode) {
    this.returnCode = returnCode;
    setReturnCodeIsSet(true);
    return this;
  }

  public void unsetReturnCode() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __RETURNCODE_ISSET_ID);
  }

  /** Returns true if field returnCode is set (has been assigned a value) and false otherwise */
  public boolean isSetReturnCode() {
    return EncodingUtils.testBit(__isset_bitfield, __RETURNCODE_ISSET_ID);
  }

  public void setReturnCodeIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __RETURNCODE_ISSET_ID, value);
  }

  public String getReturnInfo() {
    return this.returnInfo;
  }

  public ReturnMsg setReturnInfo(String returnInfo) {
    this.returnInfo = returnInfo;
    return this;
  }

  public void unsetReturnInfo() {
    this.returnInfo = null;
  }

  /** Returns true if field returnInfo is set (has been assigned a value) and false otherwise */
  public boolean isSetReturnInfo() {
    return this.returnInfo != null;
  }

  public void setReturnInfoIsSet(boolean value) {
    if (!value) {
      this.returnInfo = null;
    }
  }

  public String getReturnResponse() {
    return this.returnResponse;
  }

  public ReturnMsg setReturnResponse(String returnResponse) {
    this.returnResponse = returnResponse;
    return this;
  }

  public void unsetReturnResponse() {
    this.returnResponse = null;
  }

  /** Returns true if field returnResponse is set (has been assigned a value) and false otherwise */
  public boolean isSetReturnResponse() {
    return this.returnResponse != null;
  }

  public void setReturnResponseIsSet(boolean value) {
    if (!value) {
      this.returnResponse = null;
    }
  }

  public String getReturnStack() {
    return this.returnStack;
  }

  public ReturnMsg setReturnStack(String returnStack) {
    this.returnStack = returnStack;
    return this;
  }

  public void unsetReturnStack() {
    this.returnStack = null;
  }

  /** Returns true if field returnStack is set (has been assigned a value) and false otherwise */
  public boolean isSetReturnStack() {
    return this.returnStack != null;
  }

  public void setReturnStackIsSet(boolean value) {
    if (!value) {
      this.returnStack = null;
    }
  }

  public void setFieldValue(_Fields field, Object value) {
    switch (field) {
    case RETURN_CODE:
      if (value == null) {
        unsetReturnCode();
      } else {
        setReturnCode((Long)value);
      }
      break;

    case RETURN_INFO:
      if (value == null) {
        unsetReturnInfo();
      } else {
        setReturnInfo((String)value);
      }
      break;

    case RETURN_RESPONSE:
      if (value == null) {
        unsetReturnResponse();
      } else {
        setReturnResponse((String)value);
      }
      break;

    case RETURN_STACK:
      if (value == null) {
        unsetReturnStack();
      } else {
        setReturnStack((String)value);
      }
      break;

    }
  }

  public Object getFieldValue(_Fields field) {
    switch (field) {
    case RETURN_CODE:
      return getReturnCode();

    case RETURN_INFO:
      return getReturnInfo();

    case RETURN_RESPONSE:
      return getReturnResponse();

    case RETURN_STACK:
      return getReturnStack();

    }
    throw new IllegalStateException();
  }

  /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
  public boolean isSet(_Fields field) {
    if (field == null) {
      throw new IllegalArgumentException();
    }

    switch (field) {
    case RETURN_CODE:
      return isSetReturnCode();
    case RETURN_INFO:
      return isSetReturnInfo();
    case RETURN_RESPONSE:
      return isSetReturnResponse();
    case RETURN_STACK:
      return isSetReturnStack();
    }
    throw new IllegalStateException();
  }

  @Override
  public boolean equals(Object that) {
    if (that == null)
      return false;
    if (that instanceof ReturnMsg)
      return this.equals((ReturnMsg)that);
    return false;
  }

  public boolean equals(ReturnMsg that) {
    if (that == null)
      return false;

    boolean this_present_returnCode = true;
    boolean that_present_returnCode = true;
    if (this_present_returnCode || that_present_returnCode) {
      if (!(this_present_returnCode && that_present_returnCode))
        return false;
      if (this.returnCode != that.returnCode)
        return false;
    }

    boolean this_present_returnInfo = true && this.isSetReturnInfo();
    boolean that_present_returnInfo = true && that.isSetReturnInfo();
    if (this_present_returnInfo || that_present_returnInfo) {
      if (!(this_present_returnInfo && that_present_returnInfo))
        return false;
      if (!this.returnInfo.equals(that.returnInfo))
        return false;
    }

    boolean this_present_returnResponse = true && this.isSetReturnResponse();
    boolean that_present_returnResponse = true && that.isSetReturnResponse();
    if (this_present_returnResponse || that_present_returnResponse) {
      if (!(this_present_returnResponse && that_present_returnResponse))
        return false;
      if (!this.returnResponse.equals(that.returnResponse))
        return false;
    }

    boolean this_present_returnStack = true && this.isSetReturnStack();
    boolean that_present_returnStack = true && that.isSetReturnStack();
    if (this_present_returnStack || that_present_returnStack) {
      if (!(this_present_returnStack && that_present_returnStack))
        return false;
      if (!this.returnStack.equals(that.returnStack))
        return false;
    }

    return true;
  }

  @Override
  public int hashCode() {
    List<Object> list = new ArrayList<Object>();

    boolean present_returnCode = true;
    list.add(present_returnCode);
    if (present_returnCode)
      list.add(returnCode);

    boolean present_returnInfo = true && (isSetReturnInfo());
    list.add(present_returnInfo);
    if (present_returnInfo)
      list.add(returnInfo);

    boolean present_returnResponse = true && (isSetReturnResponse());
    list.add(present_returnResponse);
    if (present_returnResponse)
      list.add(returnResponse);

    boolean present_returnStack = true && (isSetReturnStack());
    list.add(present_returnStack);
    if (present_returnStack)
      list.add(returnStack);

    return list.hashCode();
  }

  @Override
  public int compareTo(ReturnMsg other) {
    if (!getClass().equals(other.getClass())) {
      return getClass().getName().compareTo(other.getClass().getName());
    }

    int lastComparison = 0;

    lastComparison = Boolean.valueOf(isSetReturnCode()).compareTo(other.isSetReturnCode());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetReturnCode()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.returnCode, other.returnCode);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetReturnInfo()).compareTo(other.isSetReturnInfo());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetReturnInfo()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.returnInfo, other.returnInfo);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetReturnResponse()).compareTo(other.isSetReturnResponse());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetReturnResponse()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.returnResponse, other.returnResponse);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetReturnStack()).compareTo(other.isSetReturnStack());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetReturnStack()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.returnStack, other.returnStack);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    return 0;
  }

  public _Fields fieldForId(int fieldId) {
    return _Fields.findByThriftId(fieldId);
  }

  public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
    schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
  }

  public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
    schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder("ReturnMsg(");
    boolean first = true;

    sb.append("returnCode:");
    sb.append(this.returnCode);
    first = false;
    if (!first) sb.append(", ");
    sb.append("returnInfo:");
    if (this.returnInfo == null) {
      sb.append("null");
    } else {
      sb.append(this.returnInfo);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("returnResponse:");
    if (this.returnResponse == null) {
      sb.append("null");
    } else {
      sb.append(this.returnResponse);
    }
    first = false;
    if (isSetReturnStack()) {
      if (!first) sb.append(", ");
      sb.append("returnStack:");
      if (this.returnStack == null) {
        sb.append("null");
      } else {
        sb.append(this.returnStack);
      }
      first = false;
    }
    sb.append(")");
    return sb.toString();
  }

  public void validate() throws org.apache.thrift.TException {
    // check for required fields
    // alas, we cannot check 'returnCode' because it's a primitive and you chose the non-beans generator.
    if (returnInfo == null) {
      throw new org.apache.thrift.protocol.TProtocolException("Required field 'returnInfo' was not present! Struct: " + toString());
    }
    if (returnResponse == null) {
      throw new org.apache.thrift.protocol.TProtocolException("Required field 'returnResponse' was not present! Struct: " + toString());
    }
    // check for sub-struct validity
  }

  private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
    try {
      write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }

  private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
    try {
      // it doesn't seem like you should have to do this, but java serialization is wacky, and doesn't call the default constructor.
      __isset_bitfield = 0;
      read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }

  private static class ReturnMsgStandardSchemeFactory implements SchemeFactory {
    public ReturnMsgStandardScheme getScheme() {
      return new ReturnMsgStandardScheme();
    }
  }

  private static class ReturnMsgStandardScheme extends StandardScheme<ReturnMsg> {

    public void read(org.apache.thrift.protocol.TProtocol iprot, ReturnMsg struct) throws org.apache.thrift.TException {
      org.apache.thrift.protocol.TField schemeField;
      iprot.readStructBegin();
      while (true)
      {
        schemeField = iprot.readFieldBegin();
        if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
          break;
        }
        switch (schemeField.id) {
          case 1: // RETURN_CODE
            if (schemeField.type == org.apache.thrift.protocol.TType.I64) {
              struct.returnCode = iprot.readI64();
              struct.setReturnCodeIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 2: // RETURN_INFO
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.returnInfo = iprot.readString();
              struct.setReturnInfoIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 3: // RETURN_RESPONSE
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.returnResponse = iprot.readString();
              struct.setReturnResponseIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 4: // RETURN_STACK
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.returnStack = iprot.readString();
              struct.setReturnStackIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          default:
            org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
        }
        iprot.readFieldEnd();
      }
      iprot.readStructEnd();

      // check for required fields of primitive type, which can't be checked in the validate method
      if (!struct.isSetReturnCode()) {
        throw new org.apache.thrift.protocol.TProtocolException("Required field 'returnCode' was not found in serialized data! Struct: " + toString());
      }
      struct.validate();
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot, ReturnMsg struct) throws org.apache.thrift.TException {
      struct.validate();

      oprot.writeStructBegin(STRUCT_DESC);
      oprot.writeFieldBegin(RETURN_CODE_FIELD_DESC);
      oprot.writeI64(struct.returnCode);
      oprot.writeFieldEnd();
      if (struct.returnInfo != null) {
        oprot.writeFieldBegin(RETURN_INFO_FIELD_DESC);
        oprot.writeString(struct.returnInfo);
        oprot.writeFieldEnd();
      }
      if (struct.returnResponse != null) {
        oprot.writeFieldBegin(RETURN_RESPONSE_FIELD_DESC);
        oprot.writeString(struct.returnResponse);
        oprot.writeFieldEnd();
      }
      if (struct.returnStack != null) {
        if (struct.isSetReturnStack()) {
          oprot.writeFieldBegin(RETURN_STACK_FIELD_DESC);
          oprot.writeString(struct.returnStack);
          oprot.writeFieldEnd();
        }
      }
      oprot.writeFieldStop();
      oprot.writeStructEnd();
    }

  }

  private static class ReturnMsgTupleSchemeFactory implements SchemeFactory {
    public ReturnMsgTupleScheme getScheme() {
      return new ReturnMsgTupleScheme();
    }
  }

  private static class ReturnMsgTupleScheme extends TupleScheme<ReturnMsg> {

    @Override
    public void write(org.apache.thrift.protocol.TProtocol prot, ReturnMsg struct) throws org.apache.thrift.TException {
      TTupleProtocol oprot = (TTupleProtocol) prot;
      oprot.writeI64(struct.returnCode);
      oprot.writeString(struct.returnInfo);
      oprot.writeString(struct.returnResponse);
      BitSet optionals = new BitSet();
      if (struct.isSetReturnStack()) {
        optionals.set(0);
      }
      oprot.writeBitSet(optionals, 1);
      if (struct.isSetReturnStack()) {
        oprot.writeString(struct.returnStack);
      }
    }

    @Override
    public void read(org.apache.thrift.protocol.TProtocol prot, ReturnMsg struct) throws org.apache.thrift.TException {
      TTupleProtocol iprot = (TTupleProtocol) prot;
      struct.returnCode = iprot.readI64();
      struct.setReturnCodeIsSet(true);
      struct.returnInfo = iprot.readString();
      struct.setReturnInfoIsSet(true);
      struct.returnResponse = iprot.readString();
      struct.setReturnResponseIsSet(true);
      BitSet incoming = iprot.readBitSet(1);
      if (incoming.get(0)) {
        struct.returnStack = iprot.readString();
        struct.setReturnStackIsSet(true);
      }
    }
  }

}


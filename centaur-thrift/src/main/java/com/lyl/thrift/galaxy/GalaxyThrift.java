/**
 * Autogenerated by Thrift Compiler (0.9.3)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
package com.lyl.thrift.galaxy;

import org.apache.thrift.scheme.IScheme;
import org.apache.thrift.scheme.SchemeFactory;
import org.apache.thrift.scheme.StandardScheme;

import org.apache.thrift.scheme.TupleScheme;
import org.apache.thrift.protocol.TTupleProtocol;
import org.apache.thrift.protocol.TProtocolException;
import org.apache.thrift.EncodingUtils;
import org.apache.thrift.TException;
import org.apache.thrift.async.AsyncMethodCallback;
import org.apache.thrift.server.AbstractNonblockingServer.*;
import java.util.List;
import java.util.ArrayList;
import java.util.Map;
import java.util.HashMap;
import java.util.EnumMap;
import java.util.Set;
import java.util.HashSet;
import java.util.EnumSet;
import java.util.Collections;
import java.util.BitSet;
import java.nio.ByteBuffer;
import java.util.Arrays;
import javax.annotation.Generated;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;

@SuppressWarnings({"cast", "rawtypes", "serial", "unchecked"})
@Generated(value = "Autogenerated by Thrift Compiler (0.9.3)", date = "2019-01-04")
public class GalaxyThrift {

  public interface Iface {

    /**
     * 创建用户
     * 
     * 
     * @param header
     * @param signInfo
     * @param requestInfo
     */
    public com.lyl.thrift.common.ReturnMsg createGalaxy(com.lyl.thrift.common.Header header, com.lyl.thrift.common.SignInfo signInfo, String requestInfo) throws org.apache.thrift.TException;

    public com.lyl.thrift.common.ReturnMsg queryGalaxy(com.lyl.thrift.common.Header header, com.lyl.thrift.common.SignInfo signInfo, String requestInfo) throws org.apache.thrift.TException;

    public com.lyl.thrift.common.ReturnMsg updateGalaxy(com.lyl.thrift.common.Header header, com.lyl.thrift.common.SignInfo signInfo, String requestInfo) throws org.apache.thrift.TException;

  }

  public interface AsyncIface {

    public void createGalaxy(com.lyl.thrift.common.Header header, com.lyl.thrift.common.SignInfo signInfo, String requestInfo, org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException;

    public void queryGalaxy(com.lyl.thrift.common.Header header, com.lyl.thrift.common.SignInfo signInfo, String requestInfo, org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException;

    public void updateGalaxy(com.lyl.thrift.common.Header header, com.lyl.thrift.common.SignInfo signInfo, String requestInfo, org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException;

  }

  public static class Client extends org.apache.thrift.TServiceClient implements Iface {
    public static class Factory implements org.apache.thrift.TServiceClientFactory<Client> {
      public Factory() {}
      public Client getClient(org.apache.thrift.protocol.TProtocol prot) {
        return new Client(prot);
      }
      public Client getClient(org.apache.thrift.protocol.TProtocol iprot, org.apache.thrift.protocol.TProtocol oprot) {
        return new Client(iprot, oprot);
      }
    }

    public Client(org.apache.thrift.protocol.TProtocol prot)
    {
      super(prot, prot);
    }

    public Client(org.apache.thrift.protocol.TProtocol iprot, org.apache.thrift.protocol.TProtocol oprot) {
      super(iprot, oprot);
    }

    public com.lyl.thrift.common.ReturnMsg createGalaxy(com.lyl.thrift.common.Header header, com.lyl.thrift.common.SignInfo signInfo, String requestInfo) throws org.apache.thrift.TException
    {
      send_createGalaxy(header, signInfo, requestInfo);
      return recv_createGalaxy();
    }

    public void send_createGalaxy(com.lyl.thrift.common.Header header, com.lyl.thrift.common.SignInfo signInfo, String requestInfo) throws org.apache.thrift.TException
    {
      createGalaxy_args args = new createGalaxy_args();
      args.setHeader(header);
      args.setSignInfo(signInfo);
      args.setRequestInfo(requestInfo);
      sendBase("createGalaxy", args);
    }

    public com.lyl.thrift.common.ReturnMsg recv_createGalaxy() throws org.apache.thrift.TException
    {
      createGalaxy_result result = new createGalaxy_result();
      receiveBase(result, "createGalaxy");
      if (result.isSetSuccess()) {
        return result.success;
      }
      throw new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.MISSING_RESULT, "createGalaxy failed: unknown result");
    }

    public com.lyl.thrift.common.ReturnMsg queryGalaxy(com.lyl.thrift.common.Header header, com.lyl.thrift.common.SignInfo signInfo, String requestInfo) throws org.apache.thrift.TException
    {
      send_queryGalaxy(header, signInfo, requestInfo);
      return recv_queryGalaxy();
    }

    public void send_queryGalaxy(com.lyl.thrift.common.Header header, com.lyl.thrift.common.SignInfo signInfo, String requestInfo) throws org.apache.thrift.TException
    {
      queryGalaxy_args args = new queryGalaxy_args();
      args.setHeader(header);
      args.setSignInfo(signInfo);
      args.setRequestInfo(requestInfo);
      sendBase("queryGalaxy", args);
    }

    public com.lyl.thrift.common.ReturnMsg recv_queryGalaxy() throws org.apache.thrift.TException
    {
      queryGalaxy_result result = new queryGalaxy_result();
      receiveBase(result, "queryGalaxy");
      if (result.isSetSuccess()) {
        return result.success;
      }
      throw new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.MISSING_RESULT, "queryGalaxy failed: unknown result");
    }

    public com.lyl.thrift.common.ReturnMsg updateGalaxy(com.lyl.thrift.common.Header header, com.lyl.thrift.common.SignInfo signInfo, String requestInfo) throws org.apache.thrift.TException
    {
      send_updateGalaxy(header, signInfo, requestInfo);
      return recv_updateGalaxy();
    }

    public void send_updateGalaxy(com.lyl.thrift.common.Header header, com.lyl.thrift.common.SignInfo signInfo, String requestInfo) throws org.apache.thrift.TException
    {
      updateGalaxy_args args = new updateGalaxy_args();
      args.setHeader(header);
      args.setSignInfo(signInfo);
      args.setRequestInfo(requestInfo);
      sendBase("updateGalaxy", args);
    }

    public com.lyl.thrift.common.ReturnMsg recv_updateGalaxy() throws org.apache.thrift.TException
    {
      updateGalaxy_result result = new updateGalaxy_result();
      receiveBase(result, "updateGalaxy");
      if (result.isSetSuccess()) {
        return result.success;
      }
      throw new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.MISSING_RESULT, "updateGalaxy failed: unknown result");
    }

  }
  public static class AsyncClient extends org.apache.thrift.async.TAsyncClient implements AsyncIface {
    public static class Factory implements org.apache.thrift.async.TAsyncClientFactory<AsyncClient> {
      private org.apache.thrift.async.TAsyncClientManager clientManager;
      private org.apache.thrift.protocol.TProtocolFactory protocolFactory;
      public Factory(org.apache.thrift.async.TAsyncClientManager clientManager, org.apache.thrift.protocol.TProtocolFactory protocolFactory) {
        this.clientManager = clientManager;
        this.protocolFactory = protocolFactory;
      }
      public AsyncClient getAsyncClient(org.apache.thrift.transport.TNonblockingTransport transport) {
        return new AsyncClient(protocolFactory, clientManager, transport);
      }
    }

    public AsyncClient(org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.async.TAsyncClientManager clientManager, org.apache.thrift.transport.TNonblockingTransport transport) {
      super(protocolFactory, clientManager, transport);
    }

    public void createGalaxy(com.lyl.thrift.common.Header header, com.lyl.thrift.common.SignInfo signInfo, String requestInfo, org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException {
      checkReady();
      createGalaxy_call method_call = new createGalaxy_call(header, signInfo, requestInfo, resultHandler, this, ___protocolFactory, ___transport);
      this.___currentMethod = method_call;
      ___manager.call(method_call);
    }

    public static class createGalaxy_call extends org.apache.thrift.async.TAsyncMethodCall {
      private com.lyl.thrift.common.Header header;
      private com.lyl.thrift.common.SignInfo signInfo;
      private String requestInfo;
      public createGalaxy_call(com.lyl.thrift.common.Header header, com.lyl.thrift.common.SignInfo signInfo, String requestInfo, org.apache.thrift.async.AsyncMethodCallback resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
        super(client, protocolFactory, transport, resultHandler, false);
        this.header = header;
        this.signInfo = signInfo;
        this.requestInfo = requestInfo;
      }

      public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
        prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("createGalaxy", org.apache.thrift.protocol.TMessageType.CALL, 0));
        createGalaxy_args args = new createGalaxy_args();
        args.setHeader(header);
        args.setSignInfo(signInfo);
        args.setRequestInfo(requestInfo);
        args.write(prot);
        prot.writeMessageEnd();
      }

      public com.lyl.thrift.common.ReturnMsg getResult() throws org.apache.thrift.TException {
        if (getState() != org.apache.thrift.async.TAsyncMethodCall.State.RESPONSE_READ) {
          throw new IllegalStateException("Method call not finished!");
        }
        org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
        org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
        return (new Client(prot)).recv_createGalaxy();
      }
    }

    public void queryGalaxy(com.lyl.thrift.common.Header header, com.lyl.thrift.common.SignInfo signInfo, String requestInfo, org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException {
      checkReady();
      queryGalaxy_call method_call = new queryGalaxy_call(header, signInfo, requestInfo, resultHandler, this, ___protocolFactory, ___transport);
      this.___currentMethod = method_call;
      ___manager.call(method_call);
    }

    public static class queryGalaxy_call extends org.apache.thrift.async.TAsyncMethodCall {
      private com.lyl.thrift.common.Header header;
      private com.lyl.thrift.common.SignInfo signInfo;
      private String requestInfo;
      public queryGalaxy_call(com.lyl.thrift.common.Header header, com.lyl.thrift.common.SignInfo signInfo, String requestInfo, org.apache.thrift.async.AsyncMethodCallback resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
        super(client, protocolFactory, transport, resultHandler, false);
        this.header = header;
        this.signInfo = signInfo;
        this.requestInfo = requestInfo;
      }

      public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
        prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("queryGalaxy", org.apache.thrift.protocol.TMessageType.CALL, 0));
        queryGalaxy_args args = new queryGalaxy_args();
        args.setHeader(header);
        args.setSignInfo(signInfo);
        args.setRequestInfo(requestInfo);
        args.write(prot);
        prot.writeMessageEnd();
      }

      public com.lyl.thrift.common.ReturnMsg getResult() throws org.apache.thrift.TException {
        if (getState() != org.apache.thrift.async.TAsyncMethodCall.State.RESPONSE_READ) {
          throw new IllegalStateException("Method call not finished!");
        }
        org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
        org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
        return (new Client(prot)).recv_queryGalaxy();
      }
    }

    public void updateGalaxy(com.lyl.thrift.common.Header header, com.lyl.thrift.common.SignInfo signInfo, String requestInfo, org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException {
      checkReady();
      updateGalaxy_call method_call = new updateGalaxy_call(header, signInfo, requestInfo, resultHandler, this, ___protocolFactory, ___transport);
      this.___currentMethod = method_call;
      ___manager.call(method_call);
    }

    public static class updateGalaxy_call extends org.apache.thrift.async.TAsyncMethodCall {
      private com.lyl.thrift.common.Header header;
      private com.lyl.thrift.common.SignInfo signInfo;
      private String requestInfo;
      public updateGalaxy_call(com.lyl.thrift.common.Header header, com.lyl.thrift.common.SignInfo signInfo, String requestInfo, org.apache.thrift.async.AsyncMethodCallback resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
        super(client, protocolFactory, transport, resultHandler, false);
        this.header = header;
        this.signInfo = signInfo;
        this.requestInfo = requestInfo;
      }

      public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
        prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("updateGalaxy", org.apache.thrift.protocol.TMessageType.CALL, 0));
        updateGalaxy_args args = new updateGalaxy_args();
        args.setHeader(header);
        args.setSignInfo(signInfo);
        args.setRequestInfo(requestInfo);
        args.write(prot);
        prot.writeMessageEnd();
      }

      public com.lyl.thrift.common.ReturnMsg getResult() throws org.apache.thrift.TException {
        if (getState() != org.apache.thrift.async.TAsyncMethodCall.State.RESPONSE_READ) {
          throw new IllegalStateException("Method call not finished!");
        }
        org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
        org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
        return (new Client(prot)).recv_updateGalaxy();
      }
    }

  }

  public static class Processor<I extends Iface> extends org.apache.thrift.TBaseProcessor<I> implements org.apache.thrift.TProcessor {
    private static final Logger LOGGER = LoggerFactory.getLogger(Processor.class.getName());
    public Processor(I iface) {
      super(iface, getProcessMap(new HashMap<String, org.apache.thrift.ProcessFunction<I, ? extends org.apache.thrift.TBase>>()));
    }

    protected Processor(I iface, Map<String,  org.apache.thrift.ProcessFunction<I, ? extends  org.apache.thrift.TBase>> processMap) {
      super(iface, getProcessMap(processMap));
    }

    private static <I extends Iface> Map<String,  org.apache.thrift.ProcessFunction<I, ? extends  org.apache.thrift.TBase>> getProcessMap(Map<String,  org.apache.thrift.ProcessFunction<I, ? extends  org.apache.thrift.TBase>> processMap) {
      processMap.put("createGalaxy", new createGalaxy());
      processMap.put("queryGalaxy", new queryGalaxy());
      processMap.put("updateGalaxy", new updateGalaxy());
      return processMap;
    }

    public static class createGalaxy<I extends Iface> extends org.apache.thrift.ProcessFunction<I, createGalaxy_args> {
      public createGalaxy() {
        super("createGalaxy");
      }

      public createGalaxy_args getEmptyArgsInstance() {
        return new createGalaxy_args();
      }

      protected boolean isOneway() {
        return false;
      }

      public createGalaxy_result getResult(I iface, createGalaxy_args args) throws org.apache.thrift.TException {
        createGalaxy_result result = new createGalaxy_result();
        result.success = iface.createGalaxy(args.header, args.signInfo, args.requestInfo);
        return result;
      }
    }

    public static class queryGalaxy<I extends Iface> extends org.apache.thrift.ProcessFunction<I, queryGalaxy_args> {
      public queryGalaxy() {
        super("queryGalaxy");
      }

      public queryGalaxy_args getEmptyArgsInstance() {
        return new queryGalaxy_args();
      }

      protected boolean isOneway() {
        return false;
      }

      public queryGalaxy_result getResult(I iface, queryGalaxy_args args) throws org.apache.thrift.TException {
        queryGalaxy_result result = new queryGalaxy_result();
        result.success = iface.queryGalaxy(args.header, args.signInfo, args.requestInfo);
        return result;
      }
    }

    public static class updateGalaxy<I extends Iface> extends org.apache.thrift.ProcessFunction<I, updateGalaxy_args> {
      public updateGalaxy() {
        super("updateGalaxy");
      }

      public updateGalaxy_args getEmptyArgsInstance() {
        return new updateGalaxy_args();
      }

      protected boolean isOneway() {
        return false;
      }

      public updateGalaxy_result getResult(I iface, updateGalaxy_args args) throws org.apache.thrift.TException {
        updateGalaxy_result result = new updateGalaxy_result();
        result.success = iface.updateGalaxy(args.header, args.signInfo, args.requestInfo);
        return result;
      }
    }

  }

  public static class AsyncProcessor<I extends AsyncIface> extends org.apache.thrift.TBaseAsyncProcessor<I> {
    private static final Logger LOGGER = LoggerFactory.getLogger(AsyncProcessor.class.getName());
    public AsyncProcessor(I iface) {
      super(iface, getProcessMap(new HashMap<String, org.apache.thrift.AsyncProcessFunction<I, ? extends org.apache.thrift.TBase, ?>>()));
    }

    protected AsyncProcessor(I iface, Map<String,  org.apache.thrift.AsyncProcessFunction<I, ? extends  org.apache.thrift.TBase, ?>> processMap) {
      super(iface, getProcessMap(processMap));
    }

    private static <I extends AsyncIface> Map<String,  org.apache.thrift.AsyncProcessFunction<I, ? extends  org.apache.thrift.TBase,?>> getProcessMap(Map<String,  org.apache.thrift.AsyncProcessFunction<I, ? extends  org.apache.thrift.TBase, ?>> processMap) {
      processMap.put("createGalaxy", new createGalaxy());
      processMap.put("queryGalaxy", new queryGalaxy());
      processMap.put("updateGalaxy", new updateGalaxy());
      return processMap;
    }

    public static class createGalaxy<I extends AsyncIface> extends org.apache.thrift.AsyncProcessFunction<I, createGalaxy_args, com.lyl.thrift.common.ReturnMsg> {
      public createGalaxy() {
        super("createGalaxy");
      }

      public createGalaxy_args getEmptyArgsInstance() {
        return new createGalaxy_args();
      }

      public AsyncMethodCallback<com.lyl.thrift.common.ReturnMsg> getResultHandler(final AsyncFrameBuffer fb, final int seqid) {
        final org.apache.thrift.AsyncProcessFunction fcall = this;
        return new AsyncMethodCallback<com.lyl.thrift.common.ReturnMsg>() { 
          public void onComplete(com.lyl.thrift.common.ReturnMsg o) {
            createGalaxy_result result = new createGalaxy_result();
            result.success = o;
            try {
              fcall.sendResponse(fb,result, org.apache.thrift.protocol.TMessageType.REPLY,seqid);
              return;
            } catch (Exception e) {
              LOGGER.error("Exception writing to internal frame buffer", e);
            }
            fb.close();
          }
          public void onError(Exception e) {
            byte msgType = org.apache.thrift.protocol.TMessageType.REPLY;
            org.apache.thrift.TBase msg;
            createGalaxy_result result = new createGalaxy_result();
            {
              msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
              msg = (org.apache.thrift.TBase)new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.INTERNAL_ERROR, e.getMessage());
            }
            try {
              fcall.sendResponse(fb,msg,msgType,seqid);
              return;
            } catch (Exception ex) {
              LOGGER.error("Exception writing to internal frame buffer", ex);
            }
            fb.close();
          }
        };
      }

      protected boolean isOneway() {
        return false;
      }

      public void start(I iface, createGalaxy_args args, org.apache.thrift.async.AsyncMethodCallback<com.lyl.thrift.common.ReturnMsg> resultHandler) throws TException {
        iface.createGalaxy(args.header, args.signInfo, args.requestInfo,resultHandler);
      }
    }

    public static class queryGalaxy<I extends AsyncIface> extends org.apache.thrift.AsyncProcessFunction<I, queryGalaxy_args, com.lyl.thrift.common.ReturnMsg> {
      public queryGalaxy() {
        super("queryGalaxy");
      }

      public queryGalaxy_args getEmptyArgsInstance() {
        return new queryGalaxy_args();
      }

      public AsyncMethodCallback<com.lyl.thrift.common.ReturnMsg> getResultHandler(final AsyncFrameBuffer fb, final int seqid) {
        final org.apache.thrift.AsyncProcessFunction fcall = this;
        return new AsyncMethodCallback<com.lyl.thrift.common.ReturnMsg>() { 
          public void onComplete(com.lyl.thrift.common.ReturnMsg o) {
            queryGalaxy_result result = new queryGalaxy_result();
            result.success = o;
            try {
              fcall.sendResponse(fb,result, org.apache.thrift.protocol.TMessageType.REPLY,seqid);
              return;
            } catch (Exception e) {
              LOGGER.error("Exception writing to internal frame buffer", e);
            }
            fb.close();
          }
          public void onError(Exception e) {
            byte msgType = org.apache.thrift.protocol.TMessageType.REPLY;
            org.apache.thrift.TBase msg;
            queryGalaxy_result result = new queryGalaxy_result();
            {
              msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
              msg = (org.apache.thrift.TBase)new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.INTERNAL_ERROR, e.getMessage());
            }
            try {
              fcall.sendResponse(fb,msg,msgType,seqid);
              return;
            } catch (Exception ex) {
              LOGGER.error("Exception writing to internal frame buffer", ex);
            }
            fb.close();
          }
        };
      }

      protected boolean isOneway() {
        return false;
      }

      public void start(I iface, queryGalaxy_args args, org.apache.thrift.async.AsyncMethodCallback<com.lyl.thrift.common.ReturnMsg> resultHandler) throws TException {
        iface.queryGalaxy(args.header, args.signInfo, args.requestInfo,resultHandler);
      }
    }

    public static class updateGalaxy<I extends AsyncIface> extends org.apache.thrift.AsyncProcessFunction<I, updateGalaxy_args, com.lyl.thrift.common.ReturnMsg> {
      public updateGalaxy() {
        super("updateGalaxy");
      }

      public updateGalaxy_args getEmptyArgsInstance() {
        return new updateGalaxy_args();
      }

      public AsyncMethodCallback<com.lyl.thrift.common.ReturnMsg> getResultHandler(final AsyncFrameBuffer fb, final int seqid) {
        final org.apache.thrift.AsyncProcessFunction fcall = this;
        return new AsyncMethodCallback<com.lyl.thrift.common.ReturnMsg>() { 
          public void onComplete(com.lyl.thrift.common.ReturnMsg o) {
            updateGalaxy_result result = new updateGalaxy_result();
            result.success = o;
            try {
              fcall.sendResponse(fb,result, org.apache.thrift.protocol.TMessageType.REPLY,seqid);
              return;
            } catch (Exception e) {
              LOGGER.error("Exception writing to internal frame buffer", e);
            }
            fb.close();
          }
          public void onError(Exception e) {
            byte msgType = org.apache.thrift.protocol.TMessageType.REPLY;
            org.apache.thrift.TBase msg;
            updateGalaxy_result result = new updateGalaxy_result();
            {
              msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
              msg = (org.apache.thrift.TBase)new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.INTERNAL_ERROR, e.getMessage());
            }
            try {
              fcall.sendResponse(fb,msg,msgType,seqid);
              return;
            } catch (Exception ex) {
              LOGGER.error("Exception writing to internal frame buffer", ex);
            }
            fb.close();
          }
        };
      }

      protected boolean isOneway() {
        return false;
      }

      public void start(I iface, updateGalaxy_args args, org.apache.thrift.async.AsyncMethodCallback<com.lyl.thrift.common.ReturnMsg> resultHandler) throws TException {
        iface.updateGalaxy(args.header, args.signInfo, args.requestInfo,resultHandler);
      }
    }

  }

  public static class createGalaxy_args implements org.apache.thrift.TBase<createGalaxy_args, createGalaxy_args._Fields>, java.io.Serializable, Cloneable, Comparable<createGalaxy_args>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("createGalaxy_args");

    private static final org.apache.thrift.protocol.TField HEADER_FIELD_DESC = new org.apache.thrift.protocol.TField("header", org.apache.thrift.protocol.TType.STRUCT, (short)1);
    private static final org.apache.thrift.protocol.TField SIGN_INFO_FIELD_DESC = new org.apache.thrift.protocol.TField("signInfo", org.apache.thrift.protocol.TType.STRUCT, (short)2);
    private static final org.apache.thrift.protocol.TField REQUEST_INFO_FIELD_DESC = new org.apache.thrift.protocol.TField("requestInfo", org.apache.thrift.protocol.TType.STRING, (short)3);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new createGalaxy_argsStandardSchemeFactory());
      schemes.put(TupleScheme.class, new createGalaxy_argsTupleSchemeFactory());
    }

    public com.lyl.thrift.common.Header header; // required
    public com.lyl.thrift.common.SignInfo signInfo; // required
    public String requestInfo; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      HEADER((short)1, "header"),
      SIGN_INFO((short)2, "signInfo"),
      REQUEST_INFO((short)3, "requestInfo");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 1: // HEADER
            return HEADER;
          case 2: // SIGN_INFO
            return SIGN_INFO;
          case 3: // REQUEST_INFO
            return REQUEST_INFO;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.HEADER, new org.apache.thrift.meta_data.FieldMetaData("header", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, com.lyl.thrift.common.Header.class)));
      tmpMap.put(_Fields.SIGN_INFO, new org.apache.thrift.meta_data.FieldMetaData("signInfo", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, com.lyl.thrift.common.SignInfo.class)));
      tmpMap.put(_Fields.REQUEST_INFO, new org.apache.thrift.meta_data.FieldMetaData("requestInfo", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(createGalaxy_args.class, metaDataMap);
    }

    public createGalaxy_args() {
    }

    public createGalaxy_args(
      com.lyl.thrift.common.Header header,
      com.lyl.thrift.common.SignInfo signInfo,
      String requestInfo)
    {
      this();
      this.header = header;
      this.signInfo = signInfo;
      this.requestInfo = requestInfo;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public createGalaxy_args(createGalaxy_args other) {
      if (other.isSetHeader()) {
        this.header = new com.lyl.thrift.common.Header(other.header);
      }
      if (other.isSetSignInfo()) {
        this.signInfo = new com.lyl.thrift.common.SignInfo(other.signInfo);
      }
      if (other.isSetRequestInfo()) {
        this.requestInfo = other.requestInfo;
      }
    }

    public createGalaxy_args deepCopy() {
      return new createGalaxy_args(this);
    }

    @Override
    public void clear() {
      this.header = null;
      this.signInfo = null;
      this.requestInfo = null;
    }

    public com.lyl.thrift.common.Header getHeader() {
      return this.header;
    }

    public createGalaxy_args setHeader(com.lyl.thrift.common.Header header) {
      this.header = header;
      return this;
    }

    public void unsetHeader() {
      this.header = null;
    }

    /** Returns true if field header is set (has been assigned a value) and false otherwise */
    public boolean isSetHeader() {
      return this.header != null;
    }

    public void setHeaderIsSet(boolean value) {
      if (!value) {
        this.header = null;
      }
    }

    public com.lyl.thrift.common.SignInfo getSignInfo() {
      return this.signInfo;
    }

    public createGalaxy_args setSignInfo(com.lyl.thrift.common.SignInfo signInfo) {
      this.signInfo = signInfo;
      return this;
    }

    public void unsetSignInfo() {
      this.signInfo = null;
    }

    /** Returns true if field signInfo is set (has been assigned a value) and false otherwise */
    public boolean isSetSignInfo() {
      return this.signInfo != null;
    }

    public void setSignInfoIsSet(boolean value) {
      if (!value) {
        this.signInfo = null;
      }
    }

    public String getRequestInfo() {
      return this.requestInfo;
    }

    public createGalaxy_args setRequestInfo(String requestInfo) {
      this.requestInfo = requestInfo;
      return this;
    }

    public void unsetRequestInfo() {
      this.requestInfo = null;
    }

    /** Returns true if field requestInfo is set (has been assigned a value) and false otherwise */
    public boolean isSetRequestInfo() {
      return this.requestInfo != null;
    }

    public void setRequestInfoIsSet(boolean value) {
      if (!value) {
        this.requestInfo = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case HEADER:
        if (value == null) {
          unsetHeader();
        } else {
          setHeader((com.lyl.thrift.common.Header)value);
        }
        break;

      case SIGN_INFO:
        if (value == null) {
          unsetSignInfo();
        } else {
          setSignInfo((com.lyl.thrift.common.SignInfo)value);
        }
        break;

      case REQUEST_INFO:
        if (value == null) {
          unsetRequestInfo();
        } else {
          setRequestInfo((String)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case HEADER:
        return getHeader();

      case SIGN_INFO:
        return getSignInfo();

      case REQUEST_INFO:
        return getRequestInfo();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case HEADER:
        return isSetHeader();
      case SIGN_INFO:
        return isSetSignInfo();
      case REQUEST_INFO:
        return isSetRequestInfo();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof createGalaxy_args)
        return this.equals((createGalaxy_args)that);
      return false;
    }

    public boolean equals(createGalaxy_args that) {
      if (that == null)
        return false;

      boolean this_present_header = true && this.isSetHeader();
      boolean that_present_header = true && that.isSetHeader();
      if (this_present_header || that_present_header) {
        if (!(this_present_header && that_present_header))
          return false;
        if (!this.header.equals(that.header))
          return false;
      }

      boolean this_present_signInfo = true && this.isSetSignInfo();
      boolean that_present_signInfo = true && that.isSetSignInfo();
      if (this_present_signInfo || that_present_signInfo) {
        if (!(this_present_signInfo && that_present_signInfo))
          return false;
        if (!this.signInfo.equals(that.signInfo))
          return false;
      }

      boolean this_present_requestInfo = true && this.isSetRequestInfo();
      boolean that_present_requestInfo = true && that.isSetRequestInfo();
      if (this_present_requestInfo || that_present_requestInfo) {
        if (!(this_present_requestInfo && that_present_requestInfo))
          return false;
        if (!this.requestInfo.equals(that.requestInfo))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      List<Object> list = new ArrayList<Object>();

      boolean present_header = true && (isSetHeader());
      list.add(present_header);
      if (present_header)
        list.add(header);

      boolean present_signInfo = true && (isSetSignInfo());
      list.add(present_signInfo);
      if (present_signInfo)
        list.add(signInfo);

      boolean present_requestInfo = true && (isSetRequestInfo());
      list.add(present_requestInfo);
      if (present_requestInfo)
        list.add(requestInfo);

      return list.hashCode();
    }

    @Override
    public int compareTo(createGalaxy_args other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetHeader()).compareTo(other.isSetHeader());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetHeader()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.header, other.header);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetSignInfo()).compareTo(other.isSetSignInfo());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSignInfo()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.signInfo, other.signInfo);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetRequestInfo()).compareTo(other.isSetRequestInfo());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetRequestInfo()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.requestInfo, other.requestInfo);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
    }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("createGalaxy_args(");
      boolean first = true;

      sb.append("header:");
      if (this.header == null) {
        sb.append("null");
      } else {
        sb.append(this.header);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("signInfo:");
      if (this.signInfo == null) {
        sb.append("null");
      } else {
        sb.append(this.signInfo);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("requestInfo:");
      if (this.requestInfo == null) {
        sb.append("null");
      } else {
        sb.append(this.requestInfo);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
      if (header != null) {
        header.validate();
      }
      if (signInfo != null) {
        signInfo.validate();
      }
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class createGalaxy_argsStandardSchemeFactory implements SchemeFactory {
      public createGalaxy_argsStandardScheme getScheme() {
        return new createGalaxy_argsStandardScheme();
      }
    }

    private static class createGalaxy_argsStandardScheme extends StandardScheme<createGalaxy_args> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, createGalaxy_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 1: // HEADER
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.header = new com.lyl.thrift.common.Header();
                struct.header.read(iprot);
                struct.setHeaderIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 2: // SIGN_INFO
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.signInfo = new com.lyl.thrift.common.SignInfo();
                struct.signInfo.read(iprot);
                struct.setSignInfoIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 3: // REQUEST_INFO
              if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
                struct.requestInfo = iprot.readString();
                struct.setRequestInfoIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, createGalaxy_args struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.header != null) {
          oprot.writeFieldBegin(HEADER_FIELD_DESC);
          struct.header.write(oprot);
          oprot.writeFieldEnd();
        }
        if (struct.signInfo != null) {
          oprot.writeFieldBegin(SIGN_INFO_FIELD_DESC);
          struct.signInfo.write(oprot);
          oprot.writeFieldEnd();
        }
        if (struct.requestInfo != null) {
          oprot.writeFieldBegin(REQUEST_INFO_FIELD_DESC);
          oprot.writeString(struct.requestInfo);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class createGalaxy_argsTupleSchemeFactory implements SchemeFactory {
      public createGalaxy_argsTupleScheme getScheme() {
        return new createGalaxy_argsTupleScheme();
      }
    }

    private static class createGalaxy_argsTupleScheme extends TupleScheme<createGalaxy_args> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, createGalaxy_args struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetHeader()) {
          optionals.set(0);
        }
        if (struct.isSetSignInfo()) {
          optionals.set(1);
        }
        if (struct.isSetRequestInfo()) {
          optionals.set(2);
        }
        oprot.writeBitSet(optionals, 3);
        if (struct.isSetHeader()) {
          struct.header.write(oprot);
        }
        if (struct.isSetSignInfo()) {
          struct.signInfo.write(oprot);
        }
        if (struct.isSetRequestInfo()) {
          oprot.writeString(struct.requestInfo);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, createGalaxy_args struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(3);
        if (incoming.get(0)) {
          struct.header = new com.lyl.thrift.common.Header();
          struct.header.read(iprot);
          struct.setHeaderIsSet(true);
        }
        if (incoming.get(1)) {
          struct.signInfo = new com.lyl.thrift.common.SignInfo();
          struct.signInfo.read(iprot);
          struct.setSignInfoIsSet(true);
        }
        if (incoming.get(2)) {
          struct.requestInfo = iprot.readString();
          struct.setRequestInfoIsSet(true);
        }
      }
    }

  }

  public static class createGalaxy_result implements org.apache.thrift.TBase<createGalaxy_result, createGalaxy_result._Fields>, java.io.Serializable, Cloneable, Comparable<createGalaxy_result>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("createGalaxy_result");

    private static final org.apache.thrift.protocol.TField SUCCESS_FIELD_DESC = new org.apache.thrift.protocol.TField("success", org.apache.thrift.protocol.TType.STRUCT, (short)0);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new createGalaxy_resultStandardSchemeFactory());
      schemes.put(TupleScheme.class, new createGalaxy_resultTupleSchemeFactory());
    }

    public com.lyl.thrift.common.ReturnMsg success; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      SUCCESS((short)0, "success");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 0: // SUCCESS
            return SUCCESS;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.SUCCESS, new org.apache.thrift.meta_data.FieldMetaData("success", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, com.lyl.thrift.common.ReturnMsg.class)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(createGalaxy_result.class, metaDataMap);
    }

    public createGalaxy_result() {
    }

    public createGalaxy_result(
      com.lyl.thrift.common.ReturnMsg success)
    {
      this();
      this.success = success;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public createGalaxy_result(createGalaxy_result other) {
      if (other.isSetSuccess()) {
        this.success = new com.lyl.thrift.common.ReturnMsg(other.success);
      }
    }

    public createGalaxy_result deepCopy() {
      return new createGalaxy_result(this);
    }

    @Override
    public void clear() {
      this.success = null;
    }

    public com.lyl.thrift.common.ReturnMsg getSuccess() {
      return this.success;
    }

    public createGalaxy_result setSuccess(com.lyl.thrift.common.ReturnMsg success) {
      this.success = success;
      return this;
    }

    public void unsetSuccess() {
      this.success = null;
    }

    /** Returns true if field success is set (has been assigned a value) and false otherwise */
    public boolean isSetSuccess() {
      return this.success != null;
    }

    public void setSuccessIsSet(boolean value) {
      if (!value) {
        this.success = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case SUCCESS:
        if (value == null) {
          unsetSuccess();
        } else {
          setSuccess((com.lyl.thrift.common.ReturnMsg)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case SUCCESS:
        return getSuccess();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case SUCCESS:
        return isSetSuccess();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof createGalaxy_result)
        return this.equals((createGalaxy_result)that);
      return false;
    }

    public boolean equals(createGalaxy_result that) {
      if (that == null)
        return false;

      boolean this_present_success = true && this.isSetSuccess();
      boolean that_present_success = true && that.isSetSuccess();
      if (this_present_success || that_present_success) {
        if (!(this_present_success && that_present_success))
          return false;
        if (!this.success.equals(that.success))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      List<Object> list = new ArrayList<Object>();

      boolean present_success = true && (isSetSuccess());
      list.add(present_success);
      if (present_success)
        list.add(success);

      return list.hashCode();
    }

    @Override
    public int compareTo(createGalaxy_result other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetSuccess()).compareTo(other.isSetSuccess());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSuccess()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.success, other.success);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
      }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("createGalaxy_result(");
      boolean first = true;

      sb.append("success:");
      if (this.success == null) {
        sb.append("null");
      } else {
        sb.append(this.success);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
      if (success != null) {
        success.validate();
      }
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class createGalaxy_resultStandardSchemeFactory implements SchemeFactory {
      public createGalaxy_resultStandardScheme getScheme() {
        return new createGalaxy_resultStandardScheme();
      }
    }

    private static class createGalaxy_resultStandardScheme extends StandardScheme<createGalaxy_result> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, createGalaxy_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 0: // SUCCESS
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.success = new com.lyl.thrift.common.ReturnMsg();
                struct.success.read(iprot);
                struct.setSuccessIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, createGalaxy_result struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.success != null) {
          oprot.writeFieldBegin(SUCCESS_FIELD_DESC);
          struct.success.write(oprot);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class createGalaxy_resultTupleSchemeFactory implements SchemeFactory {
      public createGalaxy_resultTupleScheme getScheme() {
        return new createGalaxy_resultTupleScheme();
      }
    }

    private static class createGalaxy_resultTupleScheme extends TupleScheme<createGalaxy_result> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, createGalaxy_result struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetSuccess()) {
          optionals.set(0);
        }
        oprot.writeBitSet(optionals, 1);
        if (struct.isSetSuccess()) {
          struct.success.write(oprot);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, createGalaxy_result struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(1);
        if (incoming.get(0)) {
          struct.success = new com.lyl.thrift.common.ReturnMsg();
          struct.success.read(iprot);
          struct.setSuccessIsSet(true);
        }
      }
    }

  }

  public static class queryGalaxy_args implements org.apache.thrift.TBase<queryGalaxy_args, queryGalaxy_args._Fields>, java.io.Serializable, Cloneable, Comparable<queryGalaxy_args>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("queryGalaxy_args");

    private static final org.apache.thrift.protocol.TField HEADER_FIELD_DESC = new org.apache.thrift.protocol.TField("header", org.apache.thrift.protocol.TType.STRUCT, (short)1);
    private static final org.apache.thrift.protocol.TField SIGN_INFO_FIELD_DESC = new org.apache.thrift.protocol.TField("signInfo", org.apache.thrift.protocol.TType.STRUCT, (short)2);
    private static final org.apache.thrift.protocol.TField REQUEST_INFO_FIELD_DESC = new org.apache.thrift.protocol.TField("requestInfo", org.apache.thrift.protocol.TType.STRING, (short)3);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new queryGalaxy_argsStandardSchemeFactory());
      schemes.put(TupleScheme.class, new queryGalaxy_argsTupleSchemeFactory());
    }

    public com.lyl.thrift.common.Header header; // required
    public com.lyl.thrift.common.SignInfo signInfo; // required
    public String requestInfo; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      HEADER((short)1, "header"),
      SIGN_INFO((short)2, "signInfo"),
      REQUEST_INFO((short)3, "requestInfo");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 1: // HEADER
            return HEADER;
          case 2: // SIGN_INFO
            return SIGN_INFO;
          case 3: // REQUEST_INFO
            return REQUEST_INFO;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.HEADER, new org.apache.thrift.meta_data.FieldMetaData("header", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, com.lyl.thrift.common.Header.class)));
      tmpMap.put(_Fields.SIGN_INFO, new org.apache.thrift.meta_data.FieldMetaData("signInfo", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, com.lyl.thrift.common.SignInfo.class)));
      tmpMap.put(_Fields.REQUEST_INFO, new org.apache.thrift.meta_data.FieldMetaData("requestInfo", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(queryGalaxy_args.class, metaDataMap);
    }

    public queryGalaxy_args() {
    }

    public queryGalaxy_args(
      com.lyl.thrift.common.Header header,
      com.lyl.thrift.common.SignInfo signInfo,
      String requestInfo)
    {
      this();
      this.header = header;
      this.signInfo = signInfo;
      this.requestInfo = requestInfo;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public queryGalaxy_args(queryGalaxy_args other) {
      if (other.isSetHeader()) {
        this.header = new com.lyl.thrift.common.Header(other.header);
      }
      if (other.isSetSignInfo()) {
        this.signInfo = new com.lyl.thrift.common.SignInfo(other.signInfo);
      }
      if (other.isSetRequestInfo()) {
        this.requestInfo = other.requestInfo;
      }
    }

    public queryGalaxy_args deepCopy() {
      return new queryGalaxy_args(this);
    }

    @Override
    public void clear() {
      this.header = null;
      this.signInfo = null;
      this.requestInfo = null;
    }

    public com.lyl.thrift.common.Header getHeader() {
      return this.header;
    }

    public queryGalaxy_args setHeader(com.lyl.thrift.common.Header header) {
      this.header = header;
      return this;
    }

    public void unsetHeader() {
      this.header = null;
    }

    /** Returns true if field header is set (has been assigned a value) and false otherwise */
    public boolean isSetHeader() {
      return this.header != null;
    }

    public void setHeaderIsSet(boolean value) {
      if (!value) {
        this.header = null;
      }
    }

    public com.lyl.thrift.common.SignInfo getSignInfo() {
      return this.signInfo;
    }

    public queryGalaxy_args setSignInfo(com.lyl.thrift.common.SignInfo signInfo) {
      this.signInfo = signInfo;
      return this;
    }

    public void unsetSignInfo() {
      this.signInfo = null;
    }

    /** Returns true if field signInfo is set (has been assigned a value) and false otherwise */
    public boolean isSetSignInfo() {
      return this.signInfo != null;
    }

    public void setSignInfoIsSet(boolean value) {
      if (!value) {
        this.signInfo = null;
      }
    }

    public String getRequestInfo() {
      return this.requestInfo;
    }

    public queryGalaxy_args setRequestInfo(String requestInfo) {
      this.requestInfo = requestInfo;
      return this;
    }

    public void unsetRequestInfo() {
      this.requestInfo = null;
    }

    /** Returns true if field requestInfo is set (has been assigned a value) and false otherwise */
    public boolean isSetRequestInfo() {
      return this.requestInfo != null;
    }

    public void setRequestInfoIsSet(boolean value) {
      if (!value) {
        this.requestInfo = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case HEADER:
        if (value == null) {
          unsetHeader();
        } else {
          setHeader((com.lyl.thrift.common.Header)value);
        }
        break;

      case SIGN_INFO:
        if (value == null) {
          unsetSignInfo();
        } else {
          setSignInfo((com.lyl.thrift.common.SignInfo)value);
        }
        break;

      case REQUEST_INFO:
        if (value == null) {
          unsetRequestInfo();
        } else {
          setRequestInfo((String)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case HEADER:
        return getHeader();

      case SIGN_INFO:
        return getSignInfo();

      case REQUEST_INFO:
        return getRequestInfo();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case HEADER:
        return isSetHeader();
      case SIGN_INFO:
        return isSetSignInfo();
      case REQUEST_INFO:
        return isSetRequestInfo();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof queryGalaxy_args)
        return this.equals((queryGalaxy_args)that);
      return false;
    }

    public boolean equals(queryGalaxy_args that) {
      if (that == null)
        return false;

      boolean this_present_header = true && this.isSetHeader();
      boolean that_present_header = true && that.isSetHeader();
      if (this_present_header || that_present_header) {
        if (!(this_present_header && that_present_header))
          return false;
        if (!this.header.equals(that.header))
          return false;
      }

      boolean this_present_signInfo = true && this.isSetSignInfo();
      boolean that_present_signInfo = true && that.isSetSignInfo();
      if (this_present_signInfo || that_present_signInfo) {
        if (!(this_present_signInfo && that_present_signInfo))
          return false;
        if (!this.signInfo.equals(that.signInfo))
          return false;
      }

      boolean this_present_requestInfo = true && this.isSetRequestInfo();
      boolean that_present_requestInfo = true && that.isSetRequestInfo();
      if (this_present_requestInfo || that_present_requestInfo) {
        if (!(this_present_requestInfo && that_present_requestInfo))
          return false;
        if (!this.requestInfo.equals(that.requestInfo))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      List<Object> list = new ArrayList<Object>();

      boolean present_header = true && (isSetHeader());
      list.add(present_header);
      if (present_header)
        list.add(header);

      boolean present_signInfo = true && (isSetSignInfo());
      list.add(present_signInfo);
      if (present_signInfo)
        list.add(signInfo);

      boolean present_requestInfo = true && (isSetRequestInfo());
      list.add(present_requestInfo);
      if (present_requestInfo)
        list.add(requestInfo);

      return list.hashCode();
    }

    @Override
    public int compareTo(queryGalaxy_args other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetHeader()).compareTo(other.isSetHeader());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetHeader()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.header, other.header);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetSignInfo()).compareTo(other.isSetSignInfo());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSignInfo()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.signInfo, other.signInfo);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetRequestInfo()).compareTo(other.isSetRequestInfo());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetRequestInfo()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.requestInfo, other.requestInfo);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
    }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("queryGalaxy_args(");
      boolean first = true;

      sb.append("header:");
      if (this.header == null) {
        sb.append("null");
      } else {
        sb.append(this.header);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("signInfo:");
      if (this.signInfo == null) {
        sb.append("null");
      } else {
        sb.append(this.signInfo);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("requestInfo:");
      if (this.requestInfo == null) {
        sb.append("null");
      } else {
        sb.append(this.requestInfo);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
      if (header != null) {
        header.validate();
      }
      if (signInfo != null) {
        signInfo.validate();
      }
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class queryGalaxy_argsStandardSchemeFactory implements SchemeFactory {
      public queryGalaxy_argsStandardScheme getScheme() {
        return new queryGalaxy_argsStandardScheme();
      }
    }

    private static class queryGalaxy_argsStandardScheme extends StandardScheme<queryGalaxy_args> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, queryGalaxy_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 1: // HEADER
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.header = new com.lyl.thrift.common.Header();
                struct.header.read(iprot);
                struct.setHeaderIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 2: // SIGN_INFO
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.signInfo = new com.lyl.thrift.common.SignInfo();
                struct.signInfo.read(iprot);
                struct.setSignInfoIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 3: // REQUEST_INFO
              if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
                struct.requestInfo = iprot.readString();
                struct.setRequestInfoIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, queryGalaxy_args struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.header != null) {
          oprot.writeFieldBegin(HEADER_FIELD_DESC);
          struct.header.write(oprot);
          oprot.writeFieldEnd();
        }
        if (struct.signInfo != null) {
          oprot.writeFieldBegin(SIGN_INFO_FIELD_DESC);
          struct.signInfo.write(oprot);
          oprot.writeFieldEnd();
        }
        if (struct.requestInfo != null) {
          oprot.writeFieldBegin(REQUEST_INFO_FIELD_DESC);
          oprot.writeString(struct.requestInfo);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class queryGalaxy_argsTupleSchemeFactory implements SchemeFactory {
      public queryGalaxy_argsTupleScheme getScheme() {
        return new queryGalaxy_argsTupleScheme();
      }
    }

    private static class queryGalaxy_argsTupleScheme extends TupleScheme<queryGalaxy_args> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, queryGalaxy_args struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetHeader()) {
          optionals.set(0);
        }
        if (struct.isSetSignInfo()) {
          optionals.set(1);
        }
        if (struct.isSetRequestInfo()) {
          optionals.set(2);
        }
        oprot.writeBitSet(optionals, 3);
        if (struct.isSetHeader()) {
          struct.header.write(oprot);
        }
        if (struct.isSetSignInfo()) {
          struct.signInfo.write(oprot);
        }
        if (struct.isSetRequestInfo()) {
          oprot.writeString(struct.requestInfo);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, queryGalaxy_args struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(3);
        if (incoming.get(0)) {
          struct.header = new com.lyl.thrift.common.Header();
          struct.header.read(iprot);
          struct.setHeaderIsSet(true);
        }
        if (incoming.get(1)) {
          struct.signInfo = new com.lyl.thrift.common.SignInfo();
          struct.signInfo.read(iprot);
          struct.setSignInfoIsSet(true);
        }
        if (incoming.get(2)) {
          struct.requestInfo = iprot.readString();
          struct.setRequestInfoIsSet(true);
        }
      }
    }

  }

  public static class queryGalaxy_result implements org.apache.thrift.TBase<queryGalaxy_result, queryGalaxy_result._Fields>, java.io.Serializable, Cloneable, Comparable<queryGalaxy_result>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("queryGalaxy_result");

    private static final org.apache.thrift.protocol.TField SUCCESS_FIELD_DESC = new org.apache.thrift.protocol.TField("success", org.apache.thrift.protocol.TType.STRUCT, (short)0);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new queryGalaxy_resultStandardSchemeFactory());
      schemes.put(TupleScheme.class, new queryGalaxy_resultTupleSchemeFactory());
    }

    public com.lyl.thrift.common.ReturnMsg success; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      SUCCESS((short)0, "success");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 0: // SUCCESS
            return SUCCESS;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.SUCCESS, new org.apache.thrift.meta_data.FieldMetaData("success", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, com.lyl.thrift.common.ReturnMsg.class)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(queryGalaxy_result.class, metaDataMap);
    }

    public queryGalaxy_result() {
    }

    public queryGalaxy_result(
      com.lyl.thrift.common.ReturnMsg success)
    {
      this();
      this.success = success;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public queryGalaxy_result(queryGalaxy_result other) {
      if (other.isSetSuccess()) {
        this.success = new com.lyl.thrift.common.ReturnMsg(other.success);
      }
    }

    public queryGalaxy_result deepCopy() {
      return new queryGalaxy_result(this);
    }

    @Override
    public void clear() {
      this.success = null;
    }

    public com.lyl.thrift.common.ReturnMsg getSuccess() {
      return this.success;
    }

    public queryGalaxy_result setSuccess(com.lyl.thrift.common.ReturnMsg success) {
      this.success = success;
      return this;
    }

    public void unsetSuccess() {
      this.success = null;
    }

    /** Returns true if field success is set (has been assigned a value) and false otherwise */
    public boolean isSetSuccess() {
      return this.success != null;
    }

    public void setSuccessIsSet(boolean value) {
      if (!value) {
        this.success = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case SUCCESS:
        if (value == null) {
          unsetSuccess();
        } else {
          setSuccess((com.lyl.thrift.common.ReturnMsg)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case SUCCESS:
        return getSuccess();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case SUCCESS:
        return isSetSuccess();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof queryGalaxy_result)
        return this.equals((queryGalaxy_result)that);
      return false;
    }

    public boolean equals(queryGalaxy_result that) {
      if (that == null)
        return false;

      boolean this_present_success = true && this.isSetSuccess();
      boolean that_present_success = true && that.isSetSuccess();
      if (this_present_success || that_present_success) {
        if (!(this_present_success && that_present_success))
          return false;
        if (!this.success.equals(that.success))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      List<Object> list = new ArrayList<Object>();

      boolean present_success = true && (isSetSuccess());
      list.add(present_success);
      if (present_success)
        list.add(success);

      return list.hashCode();
    }

    @Override
    public int compareTo(queryGalaxy_result other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetSuccess()).compareTo(other.isSetSuccess());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSuccess()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.success, other.success);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
      }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("queryGalaxy_result(");
      boolean first = true;

      sb.append("success:");
      if (this.success == null) {
        sb.append("null");
      } else {
        sb.append(this.success);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
      if (success != null) {
        success.validate();
      }
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class queryGalaxy_resultStandardSchemeFactory implements SchemeFactory {
      public queryGalaxy_resultStandardScheme getScheme() {
        return new queryGalaxy_resultStandardScheme();
      }
    }

    private static class queryGalaxy_resultStandardScheme extends StandardScheme<queryGalaxy_result> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, queryGalaxy_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 0: // SUCCESS
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.success = new com.lyl.thrift.common.ReturnMsg();
                struct.success.read(iprot);
                struct.setSuccessIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, queryGalaxy_result struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.success != null) {
          oprot.writeFieldBegin(SUCCESS_FIELD_DESC);
          struct.success.write(oprot);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class queryGalaxy_resultTupleSchemeFactory implements SchemeFactory {
      public queryGalaxy_resultTupleScheme getScheme() {
        return new queryGalaxy_resultTupleScheme();
      }
    }

    private static class queryGalaxy_resultTupleScheme extends TupleScheme<queryGalaxy_result> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, queryGalaxy_result struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetSuccess()) {
          optionals.set(0);
        }
        oprot.writeBitSet(optionals, 1);
        if (struct.isSetSuccess()) {
          struct.success.write(oprot);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, queryGalaxy_result struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(1);
        if (incoming.get(0)) {
          struct.success = new com.lyl.thrift.common.ReturnMsg();
          struct.success.read(iprot);
          struct.setSuccessIsSet(true);
        }
      }
    }

  }

  public static class updateGalaxy_args implements org.apache.thrift.TBase<updateGalaxy_args, updateGalaxy_args._Fields>, java.io.Serializable, Cloneable, Comparable<updateGalaxy_args>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("updateGalaxy_args");

    private static final org.apache.thrift.protocol.TField HEADER_FIELD_DESC = new org.apache.thrift.protocol.TField("header", org.apache.thrift.protocol.TType.STRUCT, (short)1);
    private static final org.apache.thrift.protocol.TField SIGN_INFO_FIELD_DESC = new org.apache.thrift.protocol.TField("signInfo", org.apache.thrift.protocol.TType.STRUCT, (short)2);
    private static final org.apache.thrift.protocol.TField REQUEST_INFO_FIELD_DESC = new org.apache.thrift.protocol.TField("requestInfo", org.apache.thrift.protocol.TType.STRING, (short)3);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new updateGalaxy_argsStandardSchemeFactory());
      schemes.put(TupleScheme.class, new updateGalaxy_argsTupleSchemeFactory());
    }

    public com.lyl.thrift.common.Header header; // required
    public com.lyl.thrift.common.SignInfo signInfo; // required
    public String requestInfo; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      HEADER((short)1, "header"),
      SIGN_INFO((short)2, "signInfo"),
      REQUEST_INFO((short)3, "requestInfo");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 1: // HEADER
            return HEADER;
          case 2: // SIGN_INFO
            return SIGN_INFO;
          case 3: // REQUEST_INFO
            return REQUEST_INFO;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.HEADER, new org.apache.thrift.meta_data.FieldMetaData("header", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, com.lyl.thrift.common.Header.class)));
      tmpMap.put(_Fields.SIGN_INFO, new org.apache.thrift.meta_data.FieldMetaData("signInfo", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, com.lyl.thrift.common.SignInfo.class)));
      tmpMap.put(_Fields.REQUEST_INFO, new org.apache.thrift.meta_data.FieldMetaData("requestInfo", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(updateGalaxy_args.class, metaDataMap);
    }

    public updateGalaxy_args() {
    }

    public updateGalaxy_args(
      com.lyl.thrift.common.Header header,
      com.lyl.thrift.common.SignInfo signInfo,
      String requestInfo)
    {
      this();
      this.header = header;
      this.signInfo = signInfo;
      this.requestInfo = requestInfo;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public updateGalaxy_args(updateGalaxy_args other) {
      if (other.isSetHeader()) {
        this.header = new com.lyl.thrift.common.Header(other.header);
      }
      if (other.isSetSignInfo()) {
        this.signInfo = new com.lyl.thrift.common.SignInfo(other.signInfo);
      }
      if (other.isSetRequestInfo()) {
        this.requestInfo = other.requestInfo;
      }
    }

    public updateGalaxy_args deepCopy() {
      return new updateGalaxy_args(this);
    }

    @Override
    public void clear() {
      this.header = null;
      this.signInfo = null;
      this.requestInfo = null;
    }

    public com.lyl.thrift.common.Header getHeader() {
      return this.header;
    }

    public updateGalaxy_args setHeader(com.lyl.thrift.common.Header header) {
      this.header = header;
      return this;
    }

    public void unsetHeader() {
      this.header = null;
    }

    /** Returns true if field header is set (has been assigned a value) and false otherwise */
    public boolean isSetHeader() {
      return this.header != null;
    }

    public void setHeaderIsSet(boolean value) {
      if (!value) {
        this.header = null;
      }
    }

    public com.lyl.thrift.common.SignInfo getSignInfo() {
      return this.signInfo;
    }

    public updateGalaxy_args setSignInfo(com.lyl.thrift.common.SignInfo signInfo) {
      this.signInfo = signInfo;
      return this;
    }

    public void unsetSignInfo() {
      this.signInfo = null;
    }

    /** Returns true if field signInfo is set (has been assigned a value) and false otherwise */
    public boolean isSetSignInfo() {
      return this.signInfo != null;
    }

    public void setSignInfoIsSet(boolean value) {
      if (!value) {
        this.signInfo = null;
      }
    }

    public String getRequestInfo() {
      return this.requestInfo;
    }

    public updateGalaxy_args setRequestInfo(String requestInfo) {
      this.requestInfo = requestInfo;
      return this;
    }

    public void unsetRequestInfo() {
      this.requestInfo = null;
    }

    /** Returns true if field requestInfo is set (has been assigned a value) and false otherwise */
    public boolean isSetRequestInfo() {
      return this.requestInfo != null;
    }

    public void setRequestInfoIsSet(boolean value) {
      if (!value) {
        this.requestInfo = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case HEADER:
        if (value == null) {
          unsetHeader();
        } else {
          setHeader((com.lyl.thrift.common.Header)value);
        }
        break;

      case SIGN_INFO:
        if (value == null) {
          unsetSignInfo();
        } else {
          setSignInfo((com.lyl.thrift.common.SignInfo)value);
        }
        break;

      case REQUEST_INFO:
        if (value == null) {
          unsetRequestInfo();
        } else {
          setRequestInfo((String)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case HEADER:
        return getHeader();

      case SIGN_INFO:
        return getSignInfo();

      case REQUEST_INFO:
        return getRequestInfo();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case HEADER:
        return isSetHeader();
      case SIGN_INFO:
        return isSetSignInfo();
      case REQUEST_INFO:
        return isSetRequestInfo();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof updateGalaxy_args)
        return this.equals((updateGalaxy_args)that);
      return false;
    }

    public boolean equals(updateGalaxy_args that) {
      if (that == null)
        return false;

      boolean this_present_header = true && this.isSetHeader();
      boolean that_present_header = true && that.isSetHeader();
      if (this_present_header || that_present_header) {
        if (!(this_present_header && that_present_header))
          return false;
        if (!this.header.equals(that.header))
          return false;
      }

      boolean this_present_signInfo = true && this.isSetSignInfo();
      boolean that_present_signInfo = true && that.isSetSignInfo();
      if (this_present_signInfo || that_present_signInfo) {
        if (!(this_present_signInfo && that_present_signInfo))
          return false;
        if (!this.signInfo.equals(that.signInfo))
          return false;
      }

      boolean this_present_requestInfo = true && this.isSetRequestInfo();
      boolean that_present_requestInfo = true && that.isSetRequestInfo();
      if (this_present_requestInfo || that_present_requestInfo) {
        if (!(this_present_requestInfo && that_present_requestInfo))
          return false;
        if (!this.requestInfo.equals(that.requestInfo))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      List<Object> list = new ArrayList<Object>();

      boolean present_header = true && (isSetHeader());
      list.add(present_header);
      if (present_header)
        list.add(header);

      boolean present_signInfo = true && (isSetSignInfo());
      list.add(present_signInfo);
      if (present_signInfo)
        list.add(signInfo);

      boolean present_requestInfo = true && (isSetRequestInfo());
      list.add(present_requestInfo);
      if (present_requestInfo)
        list.add(requestInfo);

      return list.hashCode();
    }

    @Override
    public int compareTo(updateGalaxy_args other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetHeader()).compareTo(other.isSetHeader());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetHeader()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.header, other.header);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetSignInfo()).compareTo(other.isSetSignInfo());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSignInfo()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.signInfo, other.signInfo);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetRequestInfo()).compareTo(other.isSetRequestInfo());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetRequestInfo()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.requestInfo, other.requestInfo);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
    }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("updateGalaxy_args(");
      boolean first = true;

      sb.append("header:");
      if (this.header == null) {
        sb.append("null");
      } else {
        sb.append(this.header);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("signInfo:");
      if (this.signInfo == null) {
        sb.append("null");
      } else {
        sb.append(this.signInfo);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("requestInfo:");
      if (this.requestInfo == null) {
        sb.append("null");
      } else {
        sb.append(this.requestInfo);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
      if (header != null) {
        header.validate();
      }
      if (signInfo != null) {
        signInfo.validate();
      }
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class updateGalaxy_argsStandardSchemeFactory implements SchemeFactory {
      public updateGalaxy_argsStandardScheme getScheme() {
        return new updateGalaxy_argsStandardScheme();
      }
    }

    private static class updateGalaxy_argsStandardScheme extends StandardScheme<updateGalaxy_args> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, updateGalaxy_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 1: // HEADER
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.header = new com.lyl.thrift.common.Header();
                struct.header.read(iprot);
                struct.setHeaderIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 2: // SIGN_INFO
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.signInfo = new com.lyl.thrift.common.SignInfo();
                struct.signInfo.read(iprot);
                struct.setSignInfoIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 3: // REQUEST_INFO
              if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
                struct.requestInfo = iprot.readString();
                struct.setRequestInfoIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, updateGalaxy_args struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.header != null) {
          oprot.writeFieldBegin(HEADER_FIELD_DESC);
          struct.header.write(oprot);
          oprot.writeFieldEnd();
        }
        if (struct.signInfo != null) {
          oprot.writeFieldBegin(SIGN_INFO_FIELD_DESC);
          struct.signInfo.write(oprot);
          oprot.writeFieldEnd();
        }
        if (struct.requestInfo != null) {
          oprot.writeFieldBegin(REQUEST_INFO_FIELD_DESC);
          oprot.writeString(struct.requestInfo);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class updateGalaxy_argsTupleSchemeFactory implements SchemeFactory {
      public updateGalaxy_argsTupleScheme getScheme() {
        return new updateGalaxy_argsTupleScheme();
      }
    }

    private static class updateGalaxy_argsTupleScheme extends TupleScheme<updateGalaxy_args> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, updateGalaxy_args struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetHeader()) {
          optionals.set(0);
        }
        if (struct.isSetSignInfo()) {
          optionals.set(1);
        }
        if (struct.isSetRequestInfo()) {
          optionals.set(2);
        }
        oprot.writeBitSet(optionals, 3);
        if (struct.isSetHeader()) {
          struct.header.write(oprot);
        }
        if (struct.isSetSignInfo()) {
          struct.signInfo.write(oprot);
        }
        if (struct.isSetRequestInfo()) {
          oprot.writeString(struct.requestInfo);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, updateGalaxy_args struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(3);
        if (incoming.get(0)) {
          struct.header = new com.lyl.thrift.common.Header();
          struct.header.read(iprot);
          struct.setHeaderIsSet(true);
        }
        if (incoming.get(1)) {
          struct.signInfo = new com.lyl.thrift.common.SignInfo();
          struct.signInfo.read(iprot);
          struct.setSignInfoIsSet(true);
        }
        if (incoming.get(2)) {
          struct.requestInfo = iprot.readString();
          struct.setRequestInfoIsSet(true);
        }
      }
    }

  }

  public static class updateGalaxy_result implements org.apache.thrift.TBase<updateGalaxy_result, updateGalaxy_result._Fields>, java.io.Serializable, Cloneable, Comparable<updateGalaxy_result>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("updateGalaxy_result");

    private static final org.apache.thrift.protocol.TField SUCCESS_FIELD_DESC = new org.apache.thrift.protocol.TField("success", org.apache.thrift.protocol.TType.STRUCT, (short)0);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new updateGalaxy_resultStandardSchemeFactory());
      schemes.put(TupleScheme.class, new updateGalaxy_resultTupleSchemeFactory());
    }

    public com.lyl.thrift.common.ReturnMsg success; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      SUCCESS((short)0, "success");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 0: // SUCCESS
            return SUCCESS;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.SUCCESS, new org.apache.thrift.meta_data.FieldMetaData("success", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, com.lyl.thrift.common.ReturnMsg.class)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(updateGalaxy_result.class, metaDataMap);
    }

    public updateGalaxy_result() {
    }

    public updateGalaxy_result(
      com.lyl.thrift.common.ReturnMsg success)
    {
      this();
      this.success = success;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public updateGalaxy_result(updateGalaxy_result other) {
      if (other.isSetSuccess()) {
        this.success = new com.lyl.thrift.common.ReturnMsg(other.success);
      }
    }

    public updateGalaxy_result deepCopy() {
      return new updateGalaxy_result(this);
    }

    @Override
    public void clear() {
      this.success = null;
    }

    public com.lyl.thrift.common.ReturnMsg getSuccess() {
      return this.success;
    }

    public updateGalaxy_result setSuccess(com.lyl.thrift.common.ReturnMsg success) {
      this.success = success;
      return this;
    }

    public void unsetSuccess() {
      this.success = null;
    }

    /** Returns true if field success is set (has been assigned a value) and false otherwise */
    public boolean isSetSuccess() {
      return this.success != null;
    }

    public void setSuccessIsSet(boolean value) {
      if (!value) {
        this.success = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case SUCCESS:
        if (value == null) {
          unsetSuccess();
        } else {
          setSuccess((com.lyl.thrift.common.ReturnMsg)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case SUCCESS:
        return getSuccess();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case SUCCESS:
        return isSetSuccess();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof updateGalaxy_result)
        return this.equals((updateGalaxy_result)that);
      return false;
    }

    public boolean equals(updateGalaxy_result that) {
      if (that == null)
        return false;

      boolean this_present_success = true && this.isSetSuccess();
      boolean that_present_success = true && that.isSetSuccess();
      if (this_present_success || that_present_success) {
        if (!(this_present_success && that_present_success))
          return false;
        if (!this.success.equals(that.success))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      List<Object> list = new ArrayList<Object>();

      boolean present_success = true && (isSetSuccess());
      list.add(present_success);
      if (present_success)
        list.add(success);

      return list.hashCode();
    }

    @Override
    public int compareTo(updateGalaxy_result other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetSuccess()).compareTo(other.isSetSuccess());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSuccess()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.success, other.success);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
      }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("updateGalaxy_result(");
      boolean first = true;

      sb.append("success:");
      if (this.success == null) {
        sb.append("null");
      } else {
        sb.append(this.success);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
      if (success != null) {
        success.validate();
      }
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class updateGalaxy_resultStandardSchemeFactory implements SchemeFactory {
      public updateGalaxy_resultStandardScheme getScheme() {
        return new updateGalaxy_resultStandardScheme();
      }
    }

    private static class updateGalaxy_resultStandardScheme extends StandardScheme<updateGalaxy_result> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, updateGalaxy_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 0: // SUCCESS
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.success = new com.lyl.thrift.common.ReturnMsg();
                struct.success.read(iprot);
                struct.setSuccessIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, updateGalaxy_result struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.success != null) {
          oprot.writeFieldBegin(SUCCESS_FIELD_DESC);
          struct.success.write(oprot);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class updateGalaxy_resultTupleSchemeFactory implements SchemeFactory {
      public updateGalaxy_resultTupleScheme getScheme() {
        return new updateGalaxy_resultTupleScheme();
      }
    }

    private static class updateGalaxy_resultTupleScheme extends TupleScheme<updateGalaxy_result> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, updateGalaxy_result struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetSuccess()) {
          optionals.set(0);
        }
        oprot.writeBitSet(optionals, 1);
        if (struct.isSetSuccess()) {
          struct.success.write(oprot);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, updateGalaxy_result struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(1);
        if (incoming.get(0)) {
          struct.success = new com.lyl.thrift.common.ReturnMsg();
          struct.success.read(iprot);
          struct.setSuccessIsSet(true);
        }
      }
    }

  }

}
